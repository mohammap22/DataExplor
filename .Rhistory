library(ggplot2)
library(shiny)
library(dplyr)
library(tidyverse)
WDIData <- read.csv("WDIData.csv")
View(WDIData)
plot(WDIData$X1960, WDIData$X1962)
View(WDIData)
plot(WDIData$X1960, WDIData$X2019)
WDI-AFE <- WDIData[WDIData$Country.Code == "AFE",]
WDIAFE <- WDIData[WDIData$Country.Code == "AFE",]
View(WDIAFE)
hist(WDIAFE[WDIAFE$Indicator.Code == 'IQ.CPA.GNDR.XQ',])
WDIAFE$Indicator.Code == 'IQ.CPA.GNDR.XQ',]
WDIAFE[WDIAFE$Indicator.Code == 'IQ.CPA.GNDR.XQ',]
as.list(WDIAFE[WDIAFE$Indicator.Code == 'IQ.CPA.GNDR.XQ',])
hist(as.list(WDIAFE[WDIAFE$Indicator.Code == 'IQ.CPA.GNDR.XQ',]))
as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'IQ.CPA.GNDR.XQ',]))
hist(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'IQ.CPA.GNDR.XQ',])))
plot(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'IQ.CPA.GNDR.XQ',])))
plot(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'IQ.CPA.GNDR.XQ',])), 1960:2019)
plot(na.omit(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'IQ.CPA.GNDR.XQ',]))), 1960:2019)
na.omit(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'IQ.CPA.GNDR.XQ',])))
WDIAFE[is.na(WDIAFE)] <- 0
plot(na.omit(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'IQ.CPA.GNDR.XQ',]))), 1960:2019)
WDIAFE <- WDIAFE[is.na(WDIAFE)] <- 0
library(tidyr)
WDIAFE <- WDIAFE %>% mutate_all(funs(replace_na(.,0)))
WDIAFE[is.na(WDIAFE)] <- 0
WDIAFE <- WDIData[WDIData$Country.Code == "AFE",]
WDIAFE[is.na(WDIAFE)] <- 0
WDIAFE <- WDIData[WDIData$Country.Code == "AFE",]
WDIAFE[is.na(WDIAFE)] <- 0
plot(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'IQ.CPA.GNDR.XQ',])), 1960:2019)
plot(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'IQ.CPA.GNDR.XQ',])))
plot(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'BM.GSR.ROYL.CD',])))
plot(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'EN.ATM.CO2E.KD.GD',])))
plot(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'EN.ATM.CO2E.PP.GD.KD',])))
plot(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'EN.ATM.CO2E.PP.GD',])))
plot(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'EN.ATM.CO2E.PC',])))
View(WDIData)
WDIData[WDIData$Country.Code == "USA",]
USA <- WDIData[WDIData$Country.Code == "USA",]
plot(as.numeric(as.list(USA[USA$Indicator.Code == 'EN.ATM.CO2E.PC',])))
plot(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'EN.ATM.CO2E.KD.GD',])))
plot(as.numeric(as.list(USA[USA$Indicator.Code == 'EN.ATM.CO2E.KD.GD',])))
plot(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'EN.ATM.CO2E.KD.GD',])))
plot(as.numeric(as.list(USA[USA$Indicator.Code == 'EN.ATM.CO2E.KD.GD',])))
WDIData <- read.csv("WDIData.csv")
# Define UI for slider demo app ----
ui <- fluidPage(
# App title ----
titlePanel("Sliders"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar to demonstrate various slider options ----
sidebarPanel(
# Input: Simple integer interval ----
sliderInput("integer", "Integer:",
min = 0, max = 1000,
value = 500),
# Input: Decimal interval with step value ----
sliderInput("decimal", "Decimal:",
min = 0, max = 1,
value = 0.5, step = 0.1),
# Input: Specification of range within an interval ----
sliderInput("range", "Range:",
min = 1, max = 1000,
value = c(200,500)),
# Input: Custom currency format for with basic animation ----
sliderInput("format", "Custom Format:",
min = 0, max = 10000,
value = 0, step = 2500,
pre = "$", sep = ",",
animate = TRUE),
# Input: Animation with custom interval (in ms) ----
# to control speed, plus looping
sliderInput("animation", "Looping Animation:",
min = 1, max = 2000,
value = 1, step = 10,
animate =
animationOptions(interval = 300, loop = TRUE))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Table summarizing the values entered ----
tableOutput("values")
)
)
)
server <- function(input, output) {
# Reactive expression to create data frame of all input values ----
sliderValues <- reactive({
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
paste(input$range, collapse = " "),
input$format,
input$animation)),
stringsAsFactors = FALSE)
})
# Show the values in an HTML table ----
output$values <- renderTable({
sliderValues()
})
}
library(leaflet)
plot(as.numeric(as.list(WDIAFE[WDIAFE$Indicator.Code == 'EN.ATM.CO2E.KD.GD',])))
plot(as.numeric(as.list(USA[USA$Indicator.Code == 'EN.ATM.CO2E.KD.GD',])))
mtcars
plot(mtcars$hp, mtcars$cyl)
plot(mtcars$hp, mtcars$drat)
mtcars?
>
?mtcars
require(graphics)
pairs(mtcars, main = "mtcars data", gap = 1/4)
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
## possibly more meaningful, e.g., for summary() or bivariate plots:
mtcars2 <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("automatic", "manual"))
cyl  <- ordered(cyl)
gear <- ordered(gear)
carb <- ordered(carb)
})
summary(mtcars2)
?mtcars
plot(mtcars$mpg, mtcars$wt)
abline(mtcars$mpg ~ mtcars$wt)
abline(mtcars$mpg ~ mtcars$wt)
abline(mtcars$mpg,mtcars$wt)
line(mtcars$mpg,mtcars$wt)
line(mtcars$wt,mtcars$mpg)
abline(mtcars$wt,mtcars$mpg)
abline(mtcars$mpg,mtcars$wt)
abline(5)
abline(h =2)
abline(mtcars$mpg,mtcars$wt)
plot(mtcars$mpg, mtcars$wt)
abline(mtcars$mpg,mtcars$wt)
plot(mtcars$mpg, mtcars$wt)
abline(lm(mtcars$mpg~mtcars$wt))
abline(lm(mtcars$wt~mtcars$mpg))
